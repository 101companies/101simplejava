apply plugin: 'java'
apply plugin: 'eclipse'

group = 'org.softlang.company'
version = '1.0.0'

// Use the maven repository to fetch dependencies
repositories {
	mavenCentral()
}
// This implementation uses ANTLR for Parser-Generation and JUnit for testing
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11+'
	compile group: 'org.antlr', name: 'antlr', version: '3.2'
}
// Configure testing
test {
	testLogging {
		exceptionFormat "full"
		events "passed", "failed", "skipped"
		showStandardStreams = true
	}
}
// Beautify eclipse
eclipse.classpath.file {
	whenMerged {
		classpath -> classpath.entries.removeAll {
			entry -> entry.kind == 'src' && entry.path == ''
		}
	}
	withXml {
		def node = it.asNode()
		node.appendNode('classpathentry', [kind: 'src', path: 'src/main/antlr'])
	}
}
// Additional cleanup for eclipse
cleanEclipse {
	doFirst {
		delete '.settings', 'bin'
	}
}
// Additional cleanup for ANTLR
clean {
	dependsOn cleanEclipse
	doFirst {
		delete 'src/main/java/org/softlang/company/antlr'
	}
}

// Use ANTLR to generate Parsers from Company.g, CutCompany.g and TotalCompany.g to src/main/java/org/softlang/company/antlr
task generateFromANTLR(type: JavaExec) {
	inputs.dir file('src/main/antlr')
	outputs.dir file('src/main/java/org/softlang/company/antlr')

	classpath = compileJava.classpath

	main = 'org.antlr.Tool'
	args = ['-fo', 'src/main/java/org/softlang/company/antlr', 'src/main/antlr/Company.g', 'src/main/antlr/CutCompany.g', 'src/main/antlr/TotalCompany.g']
}

// ANTLR-hook
compileJava {
	dependsOn generateFromANTLR
}