apply plugin: 'java'
apply plugin: 'eclipse'

group = 'org.softlang'
version = '1.0.0'

description = 'A ANTLR-based generator for text-to-object mappings'

repositories {
	mavenCentral()
}

configurations {
	antlr3
}

dependencies {
	antlr3 group: 'org.antlr', name: 'antlr', version: '3.2'
	compile group: 'org.antlr', name: 'antlr', version: '3.2'
	testCompile group: 'junit', name: 'junit', version: '4.11+'
	compile files('build/classes/main')
}

test {
    testLogging {
   	    exceptionFormat "full"
        events "passed", "failed", "skipped"
        showStandardStreams = true
	}
}

eclipse.classpath.file {
	withXml {
		def node = it.asNode()
		node.appendNode('classpathentry', [kind: 'src', path: 'build/generated/yapg'])
	}
}

def grammarDir = new File('src/main/java/org/softlang/grammar').getAbsolutePath()
def companyDir = new File('src/main/java/org/softlang/company').getAbsolutePath()

task cleanYapg << {
	delete 'src/main/java/org/softlang/company/Company.java'
	delete 'src/main/java/org/softlang/company/CompanyLexer.java'
	delete 'src/main/java/org/softlang/company/CompanyParser.java'
	delete 'src/main/java/org/softlang/company/Department.java'
	delete 'src/main/java/org/softlang/company/Employee.java'
	delete 'src/main/java/org/softlang/company/NonManager.java'
	delete 'src/main/java/org/softlang/company/Company.g'
	delete 'src/main/java/org/softlang/company/Company.tokens'
	delete 'src/main/java/org/softlang/grammar/Grammar.tokens'
}

clean {
	dependsOn cleanYapg
}

	/* compileYapg for execution on Grammar */
task compileYapgForGrammar (type: JavaCompile) {
	source 'src/main/java'
	destinationDir file('build/classes/main')

	classpath = compileJava.classpath
}

	/*
	task executeYapgOnGrammar (re)generates the following files in src/main/java/org/softlang/grammar/
	by executing src/main/java/org/softlang/yapg/Main with src/main/java/org/softlang/grammar/Grammar.yapg
		Atom.java
		Choice.java
		Expression.java
		Grammar.g
		Grammar.java
		Many.java
		Nonterminal.java
		Option.java
		Production.java
		Sequence.java
		Terminal.java
	*/
task executeYapgOnGrammar (dependsOn: compileYapgForGrammar, type: JavaExec) {
	inputs.dir file('src/main/java/org/softlang/grammar')
	outputs.dir file('src/main/java/org/softlang/grammar')

	classpath = compileJava.classpath

	main = 'org.softlang.yapg.Main'
	args = ['src/main/java/org/softlang/grammar','org.softlang.grammar','Grammar']
}

	/* bootstrap calls the sequence: 1. compileYapgOnGrammar 2. executeYapgOnGrammar */
task bootstrap (dependsOn: executeYapgOnGrammar) {}

	/*
	task executeAntlrOnGrammar (re)generates the following files in src/main/java/org/softlang/grammar/
	by executing org.antlr.Tool with src/main/java/org/softlang/grammar/Grammar.g:
		Grammar.tokens
		GrammarLexer.java
		GrammarParser.java
	*/
task executeAntlrOnGrammar (type: JavaExec) {
	inputs.dir file('src/main/java/org/softlang/grammar')
	outputs.dir file('src/main/java/org/softlang/grammar')

	classpath = compileJava.classpath

	main = 'org.antlr.Tool'
	args = ['-o',grammarDir,'src/main/java/org/softlang/grammar/Grammar.g']
}

	/* compileYapg for execution on Company */
task compileYapgForCompany (dependsOn: executeAntlrOnGrammar, type: JavaCompile) {
	source 'src/main/java'
	destinationDir file('build/classes/main')

	classpath = compileJava.classpath
}

	/*
	task executeYapgOnCompany (re)generates the following files in src/main/java/org/softlang/company/
	by executing src/main/java/org/softlang/yapg/Main with src/main/java/org/softlang/company/Company.yapg
		Company.g
		Company.java
		Department.java
		Employee.java
		NonManager.java
	*/
task executeYapgOnCompany (dependsOn: compileYapgForCompany, type: JavaExec) {
	inputs.dir file('src/main/java/org/softlang/company')
	outputs.dir file('src/main/java/org/softlang/company')

	classpath = compileJava.classpath

	main = 'org.softlang.yapg.Main'
	args = ['src/main/java/org/softlang/company','org.softlang.company','Company']
}

	/*
	task executeAntlrOnCompany (re)generates the following files in src/main/java/org/softlang/company/
	by executing org.antlr.Tool with src/main/java/org/softlang/company/Company.g:
		Company.tokens
		CompanyLexer.java
		CompanyParser.java
	*/
task executeAntlrOnCompany (dependsOn: executeYapgOnCompany, type: JavaExec) {
	inputs.dir file('src/main/java/org/softlang/company/Company.g')
	outputs.dir file('src/main/java/org/softlang/company')

	classpath = compileJava.classpath

	main = 'org.antlr.Tool'
	args = ['-o',companyDir,'src/main/java/org/softlang/company/Company.g']
}

	/*
	compileJava is used by "gradle(w) build"
	it calls the sequence:  1. bootstrap 2. executeAntlrOnGrammar 3. compileYapgForCompany 4. executeYapgOnCompany 5. executeAntlrOnCompany
	*/
compileJava {
	dependsOn executeAntlrOnCompany
}