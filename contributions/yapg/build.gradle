apply plugin: 'java'
apply plugin: 'eclipse'

group = 'org.softlang.company'
version = '1.0.0'

// Use the maven repository to fetch dependencies
repositories {
	mavenCentral()
}
// This implementation uses ANTLR for Parser-Generation and JUnit for testing
dependencies {
	compile group: 'org.antlr', name: 'antlr', version: '3.2'
	compile files('build/classes/main')
	testCompile group: 'junit', name: 'junit', version: '4.11+'
}
// Configure testing
test {
    testLogging {
   	    exceptionFormat "full"
        events "passed", "failed", "skipped"
        showStandardStreams = true
	}
}
// Beautify eclipse
eclipse.classpath.file {
	whenMerged {
		classpath -> classpath.entries.removeAll {
			entry -> entry.kind == 'src' && entry.path == ''
		}
	}
}
// Additional cleanup for eclipse
cleanEclipse {
	doFirst {
		delete '.settings', 'bin'
	}
}
// Additional cleanup for generated files
clean {
	dependsOn cleanEclipse
	doFirst {
		delete 'src/main/java/org/softlang/company/model/Company.java'
		delete 'src/main/java/org/softlang/company/model/CompanyLexer.java'
		delete 'src/main/java/org/softlang/company/model/CompanyParser.java'
		delete 'src/main/java/org/softlang/company/model/Department.java'
		delete 'src/main/java/org/softlang/company/model/Employee.java'
		delete 'src/main/java/org/softlang/company/model/NonManager.java'
		delete 'src/main/java/org/softlang/company/model/Company.g'
		delete 'src/main/java/org/softlang/company/model/Company.tokens'
		delete 'src/main/java/org/softlang/company/grammar/Grammar.tokens'
	}
}

task compileYapg (type: JavaCompile) {
	source 'src/main/java'
	destinationDir file('build/classes/main')

	classpath = compileJava.classpath
}

	/*
	task executeYapgOnGrammar (re)generates the following files in src/main/java/org/softlang/company/grammar/
	by executing src/main/java/org/softlang/company/yapg/Main with src/main/java/org/softlang/company/grammar/Grammar.yapg
		Atom.java
		Choice.java
		Expression.java
		Grammar.g
		Grammar.java
		Many.java
		Nonterminal.java
		Option.java
		Production.java
		Sequence.java
		Terminal.java
	*/
task executeYapgOnGrammar (dependsOn: compileYapg, type: JavaExec) {
	inputs.dir file('src/main/java/org/softlang/company/grammar')
	outputs.dir file('src/main/java/org/softlang/company/grammar')

	classpath = compileJava.classpath

	main = 'org.softlang.company.yapg.Main'
	args = ['src/main/java/org/softlang/company/grammar','org.softlang.company.grammar','Grammar']
}

	/* bootstrap calls the sequence: 1. compileYapg 2. executeYapgOnGrammar */
task bootstrap (dependsOn: executeYapgOnGrammar) {}

	/*
	task executeAntlrOnGrammar (re)generates the following files in src/main/java/org/softlang/company/grammar/
	by executing org.antlr.Tool with src/main/java/org/softlang/company/grammar/Grammar.g:
		Grammar.tokens
		GrammarLexer.java
		GrammarParser.java
	*/
task executeAntlrOnGrammar (type: JavaExec) {
	inputs.dir file('src/main/java/org/softlang/company/grammar')
	outputs.dir file('src/main/java/org/softlang/company/grammar')

	classpath = compileJava.classpath

	main = 'org.antlr.Tool'
	args = ['-fo','src/main/java/org/softlang/company/grammar','src/main/java/org/softlang/company/grammar/Grammar.g']
}

	/*
	task executeYapgOnCompany (re)generates the following files in src/main/java/org/softlang/company/model
	by executing src/main/java/org/softlang/company/yapg/Main with src/main/java/org/softlang/company/model/Company.yapg
		Company.g
		Company.java
		Department.java
		Employee.java
		NonManager.java
	*/
task executeYapgOnCompany (dependsOn: compileYapg, type: JavaExec) {
	inputs.dir file('src/main/java/org/softlang/company/model')
	outputs.dir file('src/main/java/org/softlang/company/model')

	classpath = compileJava.classpath

	main = 'org.softlang.company.yapg.Main'
	args = ['src/main/java/org/softlang/company/model','org.softlang.company.model','Company']
}

	/*
	task executeAntlrOnCompany (re)generates the following files in src/main/java/org/softlang/company/model
	by executing org.antlr.Tool with src/main/java/org/softlang/company/model/Company.g:
		Company.tokens
		CompanyLexer.java
		CompanyParser.java
	*/
task executeAntlrOnCompany (dependsOn: executeYapgOnCompany, type: JavaExec) {
	inputs.dir file('src/main/java/org/softlang/company/model')
	outputs.dir file('src/main/java/org/softlang/company/model')

	classpath = compileJava.classpath

	main = 'org.antlr.Tool'
	args = ['-fo','src/main/java/org/softlang/company/model','src/main/java/org/softlang/company/model/Company.g']
}

	/*
	compileJava is used by "gradle(w) build"
	it calls the sequence:  1. bootstrap 2. executeAntlrOnGrammar 3. compileYapg 4. executeYapgOnCompany 5. executeAntlrOnCompany
	*/
compileJava {
	dependsOn executeAntlrOnCompany
}