apply plugin: 'java'
apply plugin: 'eclipse'

group = 'org.softlang'
version = '1.0.0'

description = 'A ANTLR-based generator for text-to-object mappings'

repositories {
	mavenCentral()
}

configurations {
	antlr3
}

dependencies {
	antlr3 group: 'org.antlr', name: 'antlr', version: '3.2'
	compile group: 'org.antlr', name: 'antlr', version: '3.2'
	testCompile group: 'junit', name: 'junit', version: '4.11+'
	compile files('build/classes/main')
	compile files('build/generated/yapg')
}

eclipse.classpath.file {
	withXml {
		def node = it.asNode()
		node.appendNode('classpathentry', [kind: 'src', path: 'build/generated/yapg'])
	}
}


def yapgOutputDir = 'build/generated/yapg'
def yapgSourceDir = 'src/main/java'
def antlrMainInputDir = 'src/main/antlr'
def antlrMainOutputDir = 'build/generated/antlr/org/softlang/grammar'
def antlrCompanyInputDir = yapgOutputDir
def antlrCompanyOutputDir = 'build/generated/antlr'

task mkAntlrDir {
	mkdir('build/generated/antlr')
}

task prepareMain (dependsOn: mkAntlrDir, type: JavaExec) {
	inputs.dir file(antlrMainInputDir)
	outputs.dir file(antlrMainOutputDir)

	classpath configurations.antlr3

	main = 'org.antlr.Tool'
	args = ['-o',antlrMainOutputDir,"${antlrMainInputDir}/Grammar.g"]
}

task compileYapg (dependsOn: prepareMain, type: JavaCompile) {
	source yapgSourceDir
	source antlrMainOutputDir
	destinationDir file('build/classes/main')

	classpath = compileJava.classpath
}

task executeYapg (dependsOn: compileYapg, type: JavaExec) {
	inputs.dir file('src/main/yapg')
	outputs.dir file(yapgOutputDir)

	classpath = compileJava.classpath

	main = 'org.softlang.yapg.Main'
	args = ['src/main/yapg','org.softlang.company','Company']
}

task prepareCompany (dependsOn: executeYapg, type: JavaExec) {
	inputs.dir file('src/main/yapg')
	outputs.dir file('src/main/yapg')

	classpath = compileJava.classpath

	main = 'org.antlr.Tool'
	args = ['-o','src/main/yapg','src/main/yapg/Company.g']
}

task copyYapgGenerated (dependsOn: prepareCompany, type: Copy) {
	from 'src/main/yapg'
	into 'build/generated/yapg/org/softlang/company'
	include '*.java'
}

task removeYapgGenerated (dependsOn: copyYapgGenerated, type: Delete) {
	delete 'src/main/yapg/Company.java'
	delete 'src/main/yapg/CompanyLexer.java'
	delete 'src/main/yapg/CompanyParser.java'
	delete 'src/main/yapg/Department.java'
	delete 'src/main/yapg/Employee.java'
	delete 'src/main/yapg/NonManager.java'
	delete 'src/main/yapg/Company.g'
	delete 'src/main/yapg/Company.tokens'
}

compileJava {
	dependsOn removeYapgGenerated
	source 'build/classes'
}