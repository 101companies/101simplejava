apply plugin: 'java'
apply plugin: 'eclipse'

group = 'org.softlang'
version = '1.0.0'

description = 'A ANTLR-based generator for text-to-object mappings'

def yapgSourceDir = 'src/main/java'
def yapgOutputDir = '$buildDir/generated/yapg'
def antlrOutputDir = '$buildDir/generated/antlr'

sourceSets {
    yapg
    antlr3
}

dependencies {
	compile group: 'org.antlr', name: 'antlr-runtime', version: '3.2'
    antlr3Compile group: 'org.antlr', name: 'antlr', version: '3.2'
    yapgCompile group: 'org.antlr', name: 'antlr', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.11+'
}

task createDirs << {
    mkdir(yapgOutputDir)
    mkdir(antlrOutputDir)

task bootstrapANTLR(dependsOn: createDirs, type: JavaExec) {

    def sourceDir = 'src/main/antlr'
    inputs.dir file(sourceDir)
    outputs.dir file(antlrOutputDir)

    main = 'org.antlr.Tool'
    classpath = sourceSets.antlr3.compileClasspath
    args = ['-o', "${antlrOutputDir}", "${sourceDir}/Grammar.g"]
}

compileYAPG(dependsOn: bootstrapANTLR, type: JavaCompile) {
    source yapgSourceDir
    destinationDir file(yapgOutputDir)
}
/*task compileYAPG(dependsOn: bootstrapANTLR, type: JavaCompile) {
    source 'src/main/java'
    destinationDir file('$buildDir/generated/yapg')
    classpath = main.compileClasspath
}*/

task bootstrapYAPG(dependsOn: compileYAPG, type: JavaExec) {

    inputs.dir file(antlrOutputDir)
    outputs.dir file(yapgOutputDir)

    classpath = configurations.antlr3
    main = 'org.yapg.Main'
    args = [antlrOutputDir, 'org.yapg.Grammar', 'Grammar']
}

compileJava {
    dependsOn bootstrapYAPG
    source yapgOutputDir
}