description = 'An ANTLR-based generator for text-to-object mappings'

def yapgSourceDir = 'src/main/java'
def antlrOutputDir = 'build/generated/antlr'

sourceSets {
    yapg
    antlr3
}

dependencies {
	compile group: 'org.antlr', name: 'antlr-runtime', version: '3.2'
    antlr3Compile group: 'org.antlr', name: 'antlr', version: '3.2'
    yapgCompile group: 'org.antlr', name: 'antlr', version: '3.2'
}

task createDirs {
    mkdir(antlrOutputDir)
}

task bootstrapAntlr(dependsOn: createDirs, type: JavaExec) {
    def antlrDir = 'src/main/antlr'
    inputs.dir file(antlrDir)
    outputs.dir file(antlrOutputDir)

    def grammars = fileTree(antlrDir).include('**/*.g')

    main = 'org.antlr.Tool'
    classpath = sourceSets.antlr3.compileClasspath
    args = ['-o', "${antlrOutputDir}", grammars.files].flatten()
}

task compileYapg(dependsOn: bootstrapAntlr, type: JavaCompile) {
    source yapgSourceDir
    destinationDir = sourceSets.yapg.output.classesDir
    classpath = sourceSets.yapg.compileClasspath
}

task bootstrapYAPG(dependsOn: compileYapg, type: JavaExec) {

    def yapgDir = 'src/main/yapg'

    classpath = sourceSets.yapg.compileClasspath + sourceSets.yapg.output
    main = 'org.yapg.Main'
    args = [yapgDir, 'org.yapg.Grammar', 'Grammar']
}